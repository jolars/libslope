name: CI
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13]
      fail-fast: false
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
            build-essential \
            libeigen3-dev \
            catch2

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install eigen catch2

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install mingw
          vcpkg install eigen3 catch2 --triplet x64-mingw-dynamic

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.25"

      - name: Configure CMake
        run: cmake -B build -S . -DBUILD_TESTING=ON ${{ runner.os == 'Windows' && '-G "MinGW Makefiles" -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-mingw-dynamic' || '' }}

      - name: Build
        run: cmake --build build

      - name: Install
        run: ${{ runner.os == 'Windows' && 'cmake --install build' || 'sudo cmake --install build' }}

      - name: Test
        run: ctest --test-dir build --output-on-failure

  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            libeigen3-dev \
            lcov \
            gcovr \
            catch2

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.25"

      - name: Configure CMake with Coverage
        run: cmake -B build -S . -DBUILD_TESTING=ON -DENABLE_COVERAGE=ON

      - name: Build with Coverage
        run: cmake --build build

      - name: Run tests for coverage
        run: ctest --test-dir build --output-on-failure

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.5.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  release:
    name: Release
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
